var tools = {
    stringify: function (arr) {
        if (arr) {
            return JSON.stringify(arr);
        }
        return "";
    },
    abs: function (arr) {
        if (arr) {
            return Math.abs(arr);
        }
        return arr;
    },
    toFixed: function (arr, rat) {
        if (arr && typeof arr === 'number') {
            return arr.toFixed(rat);
        }
        return arr;
    },
    arrExists: function (arr, elem) {
        if (arr && arr.length > 0) {
            var res = false;
            arr.find(function (v, i) {
                if (v === elem) {
                    res = true;
                    return;
                }
            });
            return res;
        }
    },
    getTotalTime: function (item) {
        if (!item || item <= 0) {
            return '00:00';
        }
        var time = item;
        if (time <= 1) {
            return time + ' 秒';
        }
        // 60 * 60
        var hour = parseInt(time / 3600);
        var minute = parseInt((time - hour * 3600) / 60);
        var second = parseInt(time - hour * 3600 - minute * 60);
        var second = parseInt(time - hour * 3600 - minute * 60);

        var res = '';
        if (hour > 0) {
            res += tools.fixZeroStart(hour, 2) + ':';
        }
        if (minute >= 0) {
            res += tools.fixZeroStart(minute, 2) + ':';
        }
        if (second >= 0) {
            res += tools.fixZeroStart(second, 2);
        }
        return res;
    },
    fixZeroStart: function (str, n) {
        var ar = [];
        for (var i = 0; i < n; i++) {
            ar[i] = '';
        }
        return (ar.join(0) + str).slice(-n);
    },
    sumBy: function (arr, func) {
        var res = 0;
        if (!arr || !func) {
            return res;
        }
        for (var i = 0; i < arr.length; i++) {
            var e = arr[i];
            res += (func(e) || 0);
        }
        return res;
    },
    getWaveTime: function (wave) {
        if (!wave) {
            return '-';
        }
        if (wave.totalTime) {
            return tools.getTotalTime(wave.totalTime);
        }
        var toltalTime = 0;
        // 如果是单通道
        if (wave.channelType === '0') {
            toltalTime = tools.sumBy(wave.stages, function (s) {
                return s.metas.length;
            }) * 100;
        } else {
            if (wave.a && wave.b) {
                // 总时长 = 小节内原数量*100
                totalTime += tools.sumBy(wave.a.stages, function (s) {
                    return s.metas.length;
                }) * 100;
                totalTime += tools.sumBy(wave.b.stages, function (s) {
                    return s.metas.length;
                }) * 100;
            } else if (wave.a) {
                totalTime += tools.sumBy(wave.a.stages, function (s) {
                    return s.metas.length;
                }) * 100;
            } else if (wave.b) {
                totalTime += tools.sumBy(wave.b.stages, function (s) {
                    return s.metas.length;
                }) * 100;
            }
        }
        return tools.getTotalTime(toltalTime / 1000);
    }
};
module.exports = tools;